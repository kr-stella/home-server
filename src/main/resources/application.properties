# DB Replication
# 1개의 Master DB와 여러개의 Slave DB로 나눠 동일한 데이터를 가지고 있게한 후
# SELECT( R ) 요청은 Master DB의 부하를 막기 위해 Slave DB에서만 담당하게 하고
# INSERT, UPDATE, DELETE ( CUD ) 요청은 Master DB에서 담당하게 하며
# CUD를 처리한 후 Slave DB에 데이터를 동기화 시킨다.
# @Transactional(readOnly=true)을 붙여 Slave DB로 보내는식으로 처리

# jdbc:mysql:replication://master1,slave1,slave2/test
# jdbc:mysql:sequential://master1,master2/test
# jdbc:mysql:sequential://master1,master2/test

server.port=8080

# JDBC Connection URL for the DataBase
# &enabledTLSProtocols=TLSv1.3
#spring.datasoure.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.driver-class-name=${DB_DRIVER}
spring.datasource.url=${DB_URL}
spring.datasource.username=${DB_USERNAME}
spring.datasource.password=${DB_PASSWORD}

# set log
logging.config=classpath:log4j2.xml

logging.level.jdbc=off
logging.level.jdbc.sqlonly=off
logging.level.jdbc.sqltiming=info
logging.level.jdbc.audit=off
logging.level.jdbc.connection=off
logging.level.jdbc.resultset=off
logging.level.jdbc.resultsettable=off

logging.level.org.springframework.security=${LOGGING_LEVEL_SECURITY}

# Redis
spring.data.redis.host=${REDIS_HOST}
spring.data.redis.port=${REDIS_PORT}
spring.data.redis.password=${REDIS_PASSWORD}

# Spring Security Password Encoder / Error
# Relying upon circular references is discouraged and they are prohibited by default.
spring.main.allow-circular-references=true

spring.bucket.name=captivision-project
# File Upload Total Size - 없으면 파일업로드할 때 413 Error 발생
spring.servlet.multipart.max-file-size=${UPLOAD_SIZE}
spring.servlet.multipart.max-request-size=${UPLOAD_SIZE}

# html 설정
spring.thymeleaf.cache=false
spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html

# 인증 Header
auth.jwt.header=${AUTH_HEADER}
# 인증 Key
auth.jwt.key=${AUTH_KEY}
# JWT 명칭
auth.jwt.name=${JWT_NAME}
# JWT Domain
auth.jwt.domain=${JWT_DOMAIN}
# JWT Path
auth.jwt.path=${JWT_PATH}
# JWT 만료일
auth.jwt.expired=${JWT_EXPIRED}

# CSRF 관련 설정
auth.csrf.name=${CSRF_COOKIE}
# CSRF 관련 설정
auth.csrf.parameter=${CSRF_PARAMETER}
# CSRF 관련 설정
auth.csrf.header=${CSRF_HEADER}

# 로그인서버
server.url.login=${SERVER_URL_LOGIN}
# 인증서버
server.url.auth=${SERVER_URL_AUTH}
# 실제 로그아웃이 동작하는 경로
server.url.logout=${SERVER_URL_LOGOUT}